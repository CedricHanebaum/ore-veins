buildscript {
    repositories {
        maven { // Forge
            url = 'https://files.minecraftforge.net/maven'
        }
        maven { // CF Plugin
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.1.0'
    }
}
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'idea'

version = "${mod_version}"
group = 'com.alcatrazescapee.oreveins' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'oreveins'

ext.priv = parseConfig(file('../../jar-signing/private.properties'))

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20190224-1.13.1'
    //makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    //accessTransformer = file('my_at.cfg')
    
    // default run configurations.
    // these can be tweaked, removed, or duplicated as needed.
    runs {
        client = {
            // recommended logging data for a userdev environment
            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            // recommended logging level for the console
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
        server = {
            // recommended logging data for a userdev environment
            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            // recommended logging level for the console
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
}

curseforge {
    if (priv == null) {
        return
    }
    project {
        apiKey = "${priv.curseforge_api_token}"
        id = "296887"
        changelog = file("changelog.txt")
        releaseType = "alpha"

        addGameVersion("${mc_version}")
    }
}

// Puts the mod version into the jar for mods.toml to read from
jar {
    manifest {
        attributes([
                "Implementation-Version": "${mod_version}",
        ])
    }
}

tasks.curseforge.dependsOn build

def static parseConfig(File config) {
    if (config.exists()) {
        config.withReader {
            def prop = new Properties()
            prop.load(it)
            return (new ConfigSlurper().parse(prop))
        }
    } else {
        return null
    }
}